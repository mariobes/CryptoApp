// <auto-generated />
using System;
using CryptoApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CryptoApp.Data.Migrations
{
    [DbContext(typeof(CryptoAppContext))]
    [Migration("20240505194103_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CryptoApp.Models.Crypto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Descentralized")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Developer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Cryptos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descentralized = true,
                            Description = "Bitcoin",
                            Developer = "Bitcoin",
                            Name = "Bitcoin",
                            RegisterDate = new DateTime(2024, 1, 3, 13, 54, 18, 0, DateTimeKind.Unspecified),
                            Symbol = "BTC",
                            Value = 40000.0
                        },
                        new
                        {
                            Id = 2,
                            Descentralized = true,
                            Description = "Etherium",
                            Developer = "Etherium",
                            Name = "Etherium",
                            RegisterDate = new DateTime(2024, 1, 3, 13, 54, 48, 0, DateTimeKind.Unspecified),
                            Symbol = "ETH",
                            Value = 2000.0
                        },
                        new
                        {
                            Id = 3,
                            Descentralized = true,
                            Description = "Solana",
                            Developer = "Solana",
                            Name = "Solana",
                            RegisterDate = new DateTime(2024, 1, 3, 13, 55, 6, 0, DateTimeKind.Unspecified),
                            Symbol = "SOL",
                            Value = 90.0
                        },
                        new
                        {
                            Id = 4,
                            Descentralized = false,
                            Description = "Ripple",
                            Developer = "Ripple",
                            Name = "Ripple",
                            RegisterDate = new DateTime(2024, 1, 3, 13, 55, 25, 0, DateTimeKind.Unspecified),
                            Symbol = "XRP",
                            Value = 0.5
                        });
                });

            modelBuilder.Entity("CryptoApp.Models.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<double>("Charge")
                        .HasColumnType("float");

                    b.Property<string>("Concept")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CryptoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Payment_Method")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CryptoId");

                    b.HasIndex("UserId");

                    b.ToTable("Transactions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 500.0,
                            Charge = 1.0,
                            Concept = "Ingreso",
                            Date = new DateTime(2024, 1, 3, 17, 52, 7, 0, DateTimeKind.Unspecified),
                            Payment_Method = "Google Pay",
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            Amount = 100.0,
                            Charge = 1.0,
                            Concept = "Comprar Bitcoin",
                            CryptoId = 1,
                            Date = new DateTime(2024, 1, 3, 17, 54, 21, 0, DateTimeKind.Unspecified),
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            Amount = 100.0,
                            Charge = 1.0,
                            Concept = "Comprar Etherium",
                            CryptoId = 2,
                            Date = new DateTime(2024, 1, 3, 17, 54, 28, 0, DateTimeKind.Unspecified),
                            UserId = 2
                        },
                        new
                        {
                            Id = 4,
                            Amount = 50.0,
                            Charge = 1.0,
                            Concept = "Comprar Solana",
                            CryptoId = 3,
                            Date = new DateTime(2024, 1, 3, 17, 54, 33, 0, DateTimeKind.Unspecified),
                            UserId = 2
                        },
                        new
                        {
                            Id = 5,
                            Amount = 100.0,
                            Charge = 1.0,
                            Concept = "Comprar Bitcoin",
                            CryptoId = 1,
                            Date = new DateTime(2024, 1, 3, 17, 54, 37, 0, DateTimeKind.Unspecified),
                            UserId = 2
                        });
                });

            modelBuilder.Entity("CryptoApp.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Cash")
                        .HasColumnType("float");

                    b.Property<string>("DNI")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Wallet")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Birthdate = new DateTime(2001, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Cash = 0.0,
                            DNI = "32452464D",
                            Email = "mario@gmail.com",
                            Name = "Mario",
                            Nationality = "España",
                            Password = "mario12345",
                            Phone = "4574",
                            Role = "admin",
                            Wallet = 0.0
                        },
                        new
                        {
                            Id = 2,
                            Birthdate = new DateTime(2003, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Cash = 146.0,
                            DNI = "23523562D",
                            Email = "carlos@gmail.com",
                            Name = "Carlos",
                            Nationality = "Argentina",
                            Password = "carlos12345",
                            Phone = "4567477",
                            Role = "user",
                            Wallet = 350.0
                        },
                        new
                        {
                            Id = 3,
                            Birthdate = new DateTime(2003, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Cash = 0.0,
                            DNI = "23526445X",
                            Email = "fernando@gmail.com",
                            Name = "Fernando",
                            Nationality = "España",
                            Password = "fernando12345",
                            Phone = "4745",
                            Role = "user",
                            Wallet = 0.0
                        },
                        new
                        {
                            Id = 4,
                            Birthdate = new DateTime(2004, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Cash = 0.0,
                            DNI = "52353425D",
                            Email = "eduardo@gmail.com",
                            Name = "Eduardo",
                            Nationality = "España",
                            Password = "eduardo12345",
                            Phone = "4574548",
                            Role = "user",
                            Wallet = 0.0
                        });
                });

            modelBuilder.Entity("CryptoApp.Models.Transaction", b =>
                {
                    b.HasOne("CryptoApp.Models.Crypto", "Crypto")
                        .WithMany()
                        .HasForeignKey("CryptoId");

                    b.HasOne("CryptoApp.Models.User", "User")
                        .WithMany("Transactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Crypto");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CryptoApp.Models.User", b =>
                {
                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
